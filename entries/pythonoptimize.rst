Should I use PYTHONOPTIMIZE ?
#############################

:date: 2015-11-25 08:50
:tags: python, mozilla
:category: mozilla
:author: Tarek Ziade


Yesterday, I was reviewing some code for our projects and in a PR I saw
something roughly similar to this::

    try:
        assert hasattr(SomeObject, 'some_attribute')
        SomeObject.some_attribute()
    except AssertionError:
        SomeObject.do_something_else()


That didn't strike me as a good idea to rely on **assert** because
when Python is launched using the **PYTHONOPTIMIZE** flag, which you
can activate with the eponymous environment variable or with -O or -OO,
all assertions are stripped from the code.

To my surprise, a lot of people are dismissing -O and -OO saying that
no one uses those flags in production and that a code containing asserts
is fine.

**PYTHONOPTIMIZE** has three possible values: **0**, **1** (-O)
or **2** (-OO). **0** is the default, nothing happens.

For **1** this is what happens:

- asserts are stripped
- the generated bytecode files are using the **.pyo** extension instead
  of **.pyc**
- **sys.flags.optimize** is set to 1
- **__debug__** is set to False

And for **2**:

- everything **1** does
- doctsrings are stripped.


To my knowledge, one legacy reason to run **-O** was to produce
a more efficient bytecode, but I was told that this is not true anymore.

Another behavior that has changed is related to **pdb**: you could not
run some step-by-step debugging when **PYTHONOPTIMIZE** was activated.

Last, the **pyo** vs **pyc** thing should go away one day, according
to `PEP 488 <https://www.python.org/dev/peps/pep-0488>`_

So what does that leaves us ? is there any good reason to use those flags ?

Some applications leverage the **__debug__** flag to offer two running
modes. One with more debug information or a different behavior when
an error is encoutered.

That's the case for pyglet, `according to their doc <http://pyglet.readthedocs.org/en/latest/programming_guide/debug.html#error-checking>`_.

Some companies are also using the **-OO** mode to slighlty reduce the memory
footprint of running apps. It seems to be the case at YouTube.

And it's entirely possible that Python itself in the future, adds some
new optimizations behind that flag.

So yeah, **even if you don't use yourself those options, it's good practice
to make sure that your python code is tested with all possible values for
PYTHONOPTIMIZE**.

It's easy enough, just run your tests with **-O** and **-OO** and without,
and make sure your code does not depend on doctsrings or assertions.

If you have to depend on one of them, make sure your code gracefully handles
the optimize modes or raises an early error explaining why you are
not compatible with them.

Thanks to Brett Cannon, Michael Foord and others for their feedback on Twitter on this.

